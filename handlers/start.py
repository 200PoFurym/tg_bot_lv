from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.registration import return_main
from keyboards import reply_kb
from keyboards.reply_kb import main_menu_kb
from main import logger, i18n
from shortcuts import exists_leo, get_leo
from models import LeoMatchModel, User, LeomatchMain
from models import LeomatchRegistration
from aiogram.utils.i18n import lazy_gettext as __

router = Router()

async def manage(message: types.Message, state: FSMContext):
    data = await state.get_data()
    me = data.get("me") if data.get("me") else message.from_user.id
    leo = await get_leo(me)
    text = ""
    if not leo.active or not leo.search:
        count = 2
        text = i18n.gettext(
            "\n–°–µ–π—á–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤—ã–∫–ª—é—á–µ–Ω –æ—Ç –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –í—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–Ω–æ–≤—å –≤–∫–ª—é—á–∏—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    else:
        count = 3
        text = i18n.gettext("\n3. –ë–æ–ª—å—à–µ –Ω–µ –∏—â—É")
    await message.answer(
        i18n.gettext("1. –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π.\n2. –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å.{text}").format(text=text),
        reply_markup=reply_kb.get_numbers(count, True)
    )
    await state.set_state(LeomatchMain.WAIT)



@router.message(F.text == __("ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞"))
async def bot_start(message: types.Message, state: FSMContext):
    has_user = await exists_leo(message.from_user.id)
    if not has_user:
        await message.answer(
            i18n.gettext("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø - –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É."),
            reply_markup=reply_kb.begin_registration()
        )
        await state.set_state(LeomatchRegistration.START)
    else:
        account: LeoMatchModel = await get_leo(message.from_user.id)
        if account.blocked:
            await message.answer(i18n.gettext("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"))
            return
        await manage(message, state)
        kbrds = InlineKeyboardBuilder()
        kbrds.add(
            types.InlineKeyboardButton(
                text=i18n.gettext("–ó–∞–ø—É—Å—Ç–∏—Ç–µ WebApp"),
                web_app=types.WebAppInfo(url='https://dosimple.io/waleo/')
            )
        )
        await message.answer(
            i18n.gettext("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à WebAPP –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"),
            reply_markup=kbrds.as_markup()
        )

@router.message(F.text == __("–Ø –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å"))
async def cancel_search(message: types.Message, state: FSMContext):
    await return_main(message, state)
