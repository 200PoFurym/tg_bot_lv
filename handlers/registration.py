import logging
import random
import string
from aiogram import types, F, Router
from aiogram.filters import Command
from geopy import Nominatim
from keyboards.reply_kb import main_menu_kb
from models import User, LeomatchMain, LeomatchRegistration
from keyboards import reply_kb
from main import i18n
from shortcuts import add_leo, get_leo, show_profile, update_leo
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import lazy_gettext as __

geolocator = Nominatim(user_agent="–ù–£–ñ–ù–´–ô –£–ó–ï–† –ê–ì–ï–ù–¢")

router = Router()

async def return_main(message: types.Message, state: FSMContext):
    await message.answer(i18n.gettext("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."), reply_markup=main_menu_kb())
    await state.clear()

async def now_send_photo(message: types.Message, state: FSMContext):
    leo = await User.get_or_none(user_id=message.from_user.id)
    kwargs = {}
    if leo:
        kwargs['reply_markup'] = reply_kb.save_current()
    await message.answer(i18n.gettext("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), **kwargs)
    await state.set_state(LeomatchRegistration.SEND_PHOTO)

async def save_media(message: types.Message, state: FSMContext, url: str, media_type: str):
    await state.update_data(photo=url, media_type=media_type)
    data = await state.get_data()
    age = data['age']
    full_name = data['full_name']
    about_me = data['about_me']
    city = data['city']
    await show_profile(message, message.from_user.id, full_name, age, city, about_me, url, media_type)
    await message.answer(i18n.gettext("–í—Å—ë –≤–µ—Ä–Ω–æ?"), reply_markup=reply_kb.final_registration())
    await state.set_state(LeomatchRegistration.FINAL)

@router.message(F.text == i18n.gettext("–î–∞–≤–∞–π, –Ω–∞—á–Ω–µ–º!"))
async def bot_start(message: types.Message, state: FSMContext):
    await message.answer(i18n.gettext("–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å username –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∞—á–µ –í–∞–º –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ, –∫–æ–≥–æ –≤—ã –ª–∞–π–∫–Ω–∏—Ç–µ"))
    await begin_registration(message, state)

@router.message(F.text == i18n.gettext("–û—Ç–º–µ–Ω–∏—Ç—å"), F.state(LeomatchRegistration.AGE))
async def cancel_registration(message: types.Message, state: FSMContext):
    await message.answer(i18n.gettext("–û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!"))
    await return_main(message, state)

@router.message(F.text, F.state(LeomatchRegistration.AGE))
async def set_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.answer(i18n.gettext("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"))
        await state.set_state(LeomatchRegistration.MIN_AGE)
    except ValueError:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏"))

@router.message(F.text, F.state(LeomatchRegistration.MIN_AGE))
async def set_min_age(message: types.Message, state: FSMContext):
    try:
        min_age = int(message.text)
        await state.update_data(min_age=min_age)
        await message.answer(i18n.gettext("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"))
        await state.set_state(LeomatchRegistration.MAX_AGE)
    except ValueError:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏"))

@router.message(F.text, F.state(LeomatchRegistration.MAX_AGE))
async def set_max_age(message: types.Message, state: FSMContext):
    try:
        max_age = int(message.text)
        data = await state.get_data()
        min_age = data['min_age']
        await state.update_data(max_age=max_age)
        await message.reply(f'{i18n.gettext("–í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç")} {min_age} {i18n.gettext("–¥–æ")} {max_age}')
        await message.answer(i18n.gettext("–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º!"), reply_markup=reply_kb.chooice_sex())
        await state.set_state(LeomatchRegistration.SEX)
    except ValueError:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏"))

@router.message(F.text == i18n.gettext("–Ø –ø–∞—Ä–µ–Ω—å"), F.state(LeomatchRegistration.SEX))
async def set_sex_male(message: types.Message, state: FSMContext):
    await set_sex("MALE", message, state)

@router.message(F.text == i18n.gettext("–Ø –¥–µ–≤—É—à–∫–∞"), F.state(LeomatchRegistration.SEX))
async def set_sex_female(message: types.Message, state: FSMContext):
    await set_sex("FEMALE", message, state)

@router.message(F.text, F.state(LeomatchRegistration.SEX))
async def ask_sex(message: types.Message):
    await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É"))

@router.message(F.text == i18n.gettext("–ü–∞—Ä–Ω—è"), F.state(LeomatchRegistration.WHICH_SEARCH))
async def set_search_male(message: types.Message, state: FSMContext):
    await set_which_search("MALE", message, state)

@router.message(F.text == i18n.gettext("–î–µ–≤—É—à–∫—É"), F.state(LeomatchRegistration.WHICH_SEARCH))
async def set_search_female(message: types.Message, state: FSMContext):
    await set_which_search("FEMALE", message, state)

@router.message(F.text == i18n.gettext("–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ"), F.state(LeomatchRegistration.WHICH_SEARCH))
async def set_search_any(message: types.Message, state: FSMContext):
    await set_which_search("ANY", message, state)


@router.message(F.text, F.state(LeomatchRegistration.SEX))
async def set_sex(message: types.Message, state: FSMContext):
    sex = message.text
    if sex not in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª."))
        return
    await state.update_data(sex=sex)
    await message.answer(i18n.gettext("–ö–æ–≥–æ –í—ã –∏—â–∏—Ç–µ?"), reply_markup=reply_kb.which_search())
    await state.set_state(LeomatchRegistration.WHICH_SEARCH)

@router.message(F.text, F.state(LeomatchRegistration.WHICH_SEARCH))
async def set_which_search(message: types.Message, state: FSMContext):
    which_search = message.text
    if which_search not in ["–ü–∞—Ä–Ω—è", "–î–µ–≤—É—à–∫—É", "–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ"]:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞."))
        return
    await state.update_data(which_search=which_search)
    await message.answer(i18n.gettext("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?"), reply_markup=reply_kb.remove())
    await state.set_state(LeomatchRegistration.CITY)

@router.message(F.text, F.state(LeomatchRegistration.CITY))
async def set_city(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    button = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text=message.from_user.full_name)]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(i18n.gettext("–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?"), reply_markup=button)
    await state.set_state(LeomatchRegistration.FULL_NAME)

def generate_referral_code(length=10):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

@router.message(F.text == i18n.gettext("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"))
async def get_referral_handler(message: types.Message):
    user_id = message.from_user.id
    user = await User.get_or_none(user_id=user_id)
    if user:
        referral_code = user.referral_code
        await message.answer(i18n.gettext(f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª–µ–π."))
    else:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥."))

@router.message(F.text, F.state(LeomatchRegistration.FULL_NAME))
async def set_full_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    referral_code = generate_referral_code()
    if len(name) > 15:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤"))
        return
    await state.update_data(full_name=name)
    user_id = message.from_user.id
    user = await User.get_or_none(user_id=user_id)
    if not user:
        user = await User.create(user_id=user_id, full_name=name, referral_code=referral_code)
    await message.reply(f"{i18n.gettext('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')} {i18n.gettext('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç –≤–∞—Å –ª–∞–π–∫–∞—Ç—å!')}")
    await now_send_photo(message, state)

@router.message(F.photo, F.state(LeomatchRegistration.SEND_PHOTO))
async def handle_photo(message: types.Message, state: FSMContext):
    file_url = await message.photo[-1].get_url()
    await save_media(message, state, file_url, "photo")

@router.message(F.video, F.state(LeomatchRegistration.SEND_PHOTO))
async def handle_video(message: types.Message, state: FSMContext):
    file_url = await message.video.get_url()
    await save_media(message, state, file_url, "video")

@router.message(F.text, F.state(LeomatchRegistration.FINAL))
async def finalize_registration(message: types.Message, state: FSMContext):
    if message.text == i18n.gettext("–î–∞"):
        data = await state.get_data()
        user_id = message.from_user.id
        leo = await User.get_or_none(user_id=user_id)
        if not leo:
            await message.answer(i18n.gettext("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
            return
        await User.update_or_create(
            user_id=user_id,
            defaults={
                'full_name': data['full_name'],
                'age': data['age'],
                'min_age': data['min_age'],
                'max_age': data['max_age'],
                'sex': data['sex'],
                'which_search': data['which_search'],
                'about_me': data['about_me'],
                'city': data['city'],
                'photo': data['photo'],
                'media_type': data['media_type'],
            }
        )
        await message.answer(i18n.gettext("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."), reply_markup=main_menu_kb())
        await state.clear()
    elif message.text == i18n.gettext("–ù–µ—Ç"):
        await message.answer(i18n.gettext("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."), reply_markup=main_menu_kb())
        await state.clear()
    else:
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."))



@router.message(F.text, F.state(LeomatchRegistration.AGE))
async def begin_registration(message: types.Message, state: FSMContext):
    age = message.text
    if not age.isdigit():
        await message.answer(i18n.gettext("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏."))
        return
    await state.update_data(age=int(age))
    await message.answer(i18n.gettext("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å."), reply_markup=reply_kb.remove())
    await state.set_state(LeomatchRegistration.CITY)

@router.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message, state: FSMContext):
    try:
        user = await User.get_or_none(user_id=message.from_user.id)
        if user:
            if not user.is_verified:
                await message.reply(i18n.gettext("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–≤–µ—Ä—è–ª–∏ –≤–∞–º –±–æ–ª—å—à–µ."))
            if not user.is_registered:
                await message.reply(i18n.gettext("–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞."), reply_markup=main_menu_kb())
                await state.set_state(LeomatchRegistration.AGE)
            else:
                await message.reply(i18n.gettext("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"), reply_markup=main_menu_kb())
        else:
            await message.reply(i18n.gettext("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞."), reply_markup=main_menu_kb())
            await state.set_state(LeomatchRegistration.AGE)
    except Exception as e:
        await message.reply(f"Error in send_welcome handler: {e}")